15%

https://www.cbtnuggets.com/certification-playlist/Cisco/devnet-associate

Software Development and Design

- Compare data formats (XML, JSON, and YAML)
- Describe parsing of common data format (XML, JSON, and YAML) to Python data structures
- Describe the concepts of test-driven development
- Compare software development methods (agile, lean, and waterfall)
- Explain the benefits of organizing code into methods / functions, classes, and modules
- Identify the advantages of common design patterns (MVC and Observer)
- Explain the advantages of version control
- Utilize common version control operations with Git
    1.8.a Clone
    1.8.b Add/remove
    1.8.c Commit
    1.8.d Push / pull
    1.8.e Branch
    1.8.f Merge and handling conflicts
    1.8.g diff

---------------------------------------------------------------------------------------------------------------------------
1.1 - Compare data formats (XML, JSON, and YAML)

Human readable, computer readable.

- Computers need structure.
- annotated for humans.
- open and extensible.
- self describing.
- platform agnostic / lifespan.

- plain text ascii formats

XML -   uses tags,  legacy support, has been around for a while. Format for SOAP.  Very verbose (con, large file sizes)
        prolog is optional,   root tag
        tag can contain attributes. <tag id="2"> (single or double quotes)
        Can contain other tags.
        Elements can contain sub-elements in its values, empty elements <empty/> or <empty id='2'/> 
        Esc values inside qoutes &apos; &quot;
        DOM, document object model. (XML tools in VScode) , tree view structure. Makes the larger files easier to read.


JSON -  doensnt care about whitespace, indents or new line. popular, lightweight, native to JS. 
        defacto standard, serializing data into it.
        key:value pairs.
        [] array, needs commar seperation, doesnt need a key. indexed 0 1 2 etc.
        {} objects, inside object needs k:v, needs a commar separation, can nest
        key needs "" double quotes. Values dont.
        Keys = number, "str" or boolean(lower case).



YAML -  cares about indents.  Highly legible, compact/succinct, ideal for configurations.
        --- denotes a YAML file, end ... can have multiple documents in one file.
        more human readable.
        indentation matters, needs to be consistent in a collection.
        K:V pairs
        # for comments.
        Values = number, float (decimal point), strings dont need quotes litral but they can have them if you want new line etc.
        boolean = lower case or first letter upper case, true or True.

---------------------------------------------------------------------------------------------------------------------------
1.2 - - Describe parsing of common data format (XML, JSON, and YAML) to Python data structures

serializing , into and out of data format.
xml to python - elementree - quicksimple tasks
                lxml
                xmltodict , .parse()  xml to str

JSON,  import json, similar naming. array = list[] , object = dict{}
json.loads() = load strings
json.load() = load json object
json.dump()

YAML - pyyaml needs installing. pip install

print(doc['people'][1]['LastName'])



---------------------------------------------------------------------------------------------------------------------------
1.3 - Describe the concepts of test-driven development

https://www.cbtnuggets.com/learn/it-training/unit-tests-test-driven-development-tdd

testing code, unit code, done first, 

Unit testing    - test unit of code, granular, modular, automated, frequent.
                - unit, code to be tested, 
                  test-case, the code doing the test.  Python module unittest.
                  test-runner, 

Integration testing - 
System testing - 
Acceptance testing / UAT - 

Python unittest module.
    unittest.TestCase
    define test by creating methods begin with 'test'

Postman - unittesting, 'chai assertion library' in post response scripts
javascripts, pm.test , Behavior Driven Development

TDD  - writes test first. 

---------------------------------------------------------------------------------------------------------------------------
1.4 - Compare software development methods (agile, lean, and waterfall)



---------------------------------------------------------------------------------------------------------------------------

1.5 - Explain the benefits of organizing code into methods / functions, classes, and modules
https://www.cbtnuggets.com/learn/it-training/basic-programming-control-flow

D.R.Y - dont repeat yourself.
KISS - keep it simple

Control Flow, imperative / Procedural programming.
Conditions - if-then-else 
loops - while, for.
exception handling, try
goto , return. - not used anymore.

Conditions - allow for differnet branches of code.  exclusive code paths.
    If its hard to read then its poor code,  use swich statements, functions and OOPrograming.

Loops and iteration. can be nested, as can Conditions.
    the inifinite loop, - dont modify the loop condition in the loop.
                        - write unit tests for your code.
                        - dont have a loop condition that defaults to inifinite.

Functions - def funcname(), difine once then call it many times.

CLASS = state
Methods descibe the behaviou of the class/object in oop.

OOP =   architectual style, supported by many prog languages.
        use of objects, 

class - state , Behavior | top part - bottom part 

    CLASS = blueprint
    OBJECTS = house
    
---------------------------------------------------------------------------------------------------------------------------
1.6 - Identify the advantages of common design patterns (MVC and Observer)

https://www.cbtnuggets.com/learn/it-training/design-patterns

Singleton - getInstance() is used to use the single instance. Create a class thats only ever instatiated once.

Observer - subject, notify method, dependent.

MVC -   V - presents data
        M - stores data
        C - handles logic







